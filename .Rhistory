if(is.null(data)){ data }
data
input$Actives <- NULL
for (i in 1:length(options[1])){
data <- filterOption(data, options[i])
}
input$Actives <- 0
for (i in 1:length(options[1])){
data <- filterOption(data, options[i])
}
input[[option]] != 0 || !is.null(input[[option]]
)
input[[option]] != 0 || !is.null(input[[option]])
input[[option]] != 0 || !is.null(input$Actives)
input$Actives != 0 || !is.null(input$Actives)
input$Actives
input$Actives <- NULL
input$Actives != 0 || !is.null(input$Actives)
!is.null(input$Actives)
!is.null(input$Actives) || input$Actives != 0
!is.null(input$Actives) | input$Actives != 0
!is.null(input$Actives)
input$Actives != 0
!is.null(input$Actives) || input$Actives != 0
!is.null(input$Actives) ||| input$Actives != 0
!is.null(input$Actives) || input$Actives != 0
!is.null(input$Actives) | input$Actives != 0
input$Actives != 0
!is.null(input$Actives) || input$Actives != 0
input$Actives
!is.null(input$Actives) && input$Actives != 0
!is.null(input$Actives) & input$Actives != 0
!is.null(input$Actives) && input$Actives != 0
!is.null(input$Actives) && input$Actives != 0
filterOption <- function(data, option){
if (!is.null(input[[option]] && input[[option]] != 0)){ data <- data[data[[option]] >= input[[option]],] }
data
}
data
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
!is.null(input[[option]] && input[[option]] != 0
!is.null(input[[option]] && input[[option]] != 0
filterOption <- function(data, option){
if (!is.null(input[[option]]) && input[[option]] != 0)){ data <- data[data[[option]] >= input[[option]],] }
data
}
filterOption <- function(data, option){
if (!is.null(input[[option]]) && input[[option]] != 0){ data <- data[data[[option]] >= input[[option]],] }
data
}
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
data
if(is.null(data)){ data }
data
arrange(data, desc(Actives), desc(Passives), desc(CombinedHP))
if(!is.null(data)){ data <- arrange(data, desc(Actives), desc(Passives), desc(CombinedHP)) }
data
top_filter <- function(data) {
if(is.null(data)){ data } else {
# Health Filter
data <- filter(data, (MaxHP.Char3 >= input$MaxHP[1] & MaxHP.Char3 <= input$MaxHP[2]) & (MaxHP.Char1 >= input$MaxHP[1] & MaxHP.Char1 <= input$MaxHP[2]) & (MaxHP.Char2 >= input$MaxHP[1] & MaxHP.Char2 <= input$MaxHP[2]))
data <- filter(data, CombinedHP >= input$CombinedHP[1] & CombinedHP <= input$CombinedHP[2])
# Option Filter Function
filterOption <- function(data, option){
if (!is.null(input[[option]]) && input[[option]] != 0){ data <- data[data[[option]] >= input[[option]],] }
data
}
#### Options ####
options <- c("Actives", "Passives", "Cheap",
"Offensive", "Possible_Damage", "Direct_Damage", "Team_Damage",
"Defensive", "Stun", "Shake", "Healing",
"Manipulate_AP", "Steal_AP", "Gain_AP", "Destroy_AP",
"Add_Special_Tile", "Remove_Special_Tile", "Improve_Special_Tile", "Steal_Special_Tile",
"Convert_Tile_Color", "Add_CD_Tile", "Add_2_Turn_CD_Tile", "Add_Trap_Tile",
"Add_Strike_Tile", "Add_Attack_Tile", "Add_Protect_Tile", "Add_Charged_Tile",
"Add_Critical_Tile", "Add_Locked_Tile", "Add_Invis_Tile", "Add_Web_Tile")
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
if(!is.null(data)){ data <- arrange(data, desc(Actives), desc(Passives), desc(CombinedHP)) }
data
}
}
data <- a %>% rarity_filter
data %>% include_chars_filter %>% top_filter
data %>% select_chars_filter %>% top_filter
data %>% exclude_chars_filter %>% top_filter
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
table()
table
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
input$Offense <- 9
data <- a %>% rarity_filter
data
data <- a
data
data %>% include_chars_filter %>% top_filter
input$include_chars <- allChars
data %>% include_chars_filter %>% top_filter
input$include_4chars <- allChars
data %>% include_chars_filter %>% top_filter
input$include_chars <- all4Chars
data %>% include_chars_filter %>% top_filter
data %>% include_chars_filter
data %>% include_chars_filter %>% tail
input
c(input$include_1chars, input$include_2chars, input$include_3chars, input$include_4chars, input$include_5chars)
input$include_4chars <- all4Chars
c(input$include_1chars, input$include_2chars, input$include_3chars, input$include_4chars, input$include_5chars)
unchecked <- setdiff(allChars, include_chars)
include_chars <- c(input$include_1chars, input$include_2chars, input$include_3chars, input$include_4chars, input$include_5chars)
unchecked <- setdiff(allChars, include_chars)
if(length(unchecked) == 0 ){ data } else {
for(i in 1:length(unchecked)) {
data <- filter(data, Char1 != unchecked[i] & Char2 != unchecked[i] & Char3 != unchecked[i])
}
}
data
}
input$Offense <- 10
data %>% include_chars_filter
data %>% include_chars_filter %>% top_filter
if(is.null(data)){ data } else {
# Health Filter
data <- filter(data, (MaxHP.Char3 >= input$MaxHP[1] & MaxHP.Char3 <= input$MaxHP[2]) & (MaxHP.Char1 >= input$MaxHP[1] & MaxHP.Char1 <= input$MaxHP[2]) & (MaxHP.Char2 >= input$MaxHP[1] & MaxHP.Char2 <= input$MaxHP[2]))
data <- filter(data, CombinedHP >= input$CombinedHP[1] & CombinedHP <= input$CombinedHP[2])
# Option Filter Function
filterOption <- function(data, option){
if (!is.null(input[[option]]) && input[[option]] != 0){ data <- data[data[[option]] >= input[[option]],] }
data
}
#### Options ####
options <- c("Actives", "Passives", "Cheap",
"Offensive", "Possible_Damage", "Direct_Damage", "Team_Damage",
"Defensive", "Stun", "Shake", "Healing",
"Manipulate_AP", "Steal_AP", "Gain_AP", "Destroy_AP",
"Add_Special_Tile", "Remove_Special_Tile", "Improve_Special_Tile", "Steal_Special_Tile",
"Convert_Tile_Color", "Add_CD_Tile", "Add_2_Turn_CD_Tile", "Add_Trap_Tile",
"Add_Strike_Tile", "Add_Attack_Tile", "Add_Protect_Tile", "Add_Charged_Tile",
"Add_Critical_Tile", "Add_Locked_Tile", "Add_Invis_Tile", "Add_Web_Tile")
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
if(!is.null(data)){ data <- arrange(data, desc(Actives), desc(Passives), desc(CombinedHP)) }
data
}
}
data <- filter(data, (MaxHP.Char3 >= input$MaxHP[1] & MaxHP.Char3 <= input$MaxHP[2]) & (MaxHP.Char1 >= input$MaxHP[1] & MaxHP.Char1 <= input$MaxHP[2]) & (MaxHP.Char2 >= input$MaxHP[1] & MaxHP.Char2 <= input$MaxHP[2]))
data <- filter(data, CombinedHP >= input$CombinedHP[1] & CombinedHP <= input$CombinedHP[2])
filterOption <- function(data, option){
if (!is.null(input[[option]]) && input[[option]] != 0){ data <- data[data[[option]] >= input[[option]],] }
data
}
data
options <- c("Actives", "Passives", "Cheap",
"Offensive", "Possible_Damage", "Direct_Damage", "Team_Damage",
"Defensive", "Stun", "Shake", "Healing",
"Manipulate_AP", "Steal_AP", "Gain_AP", "Destroy_AP",
"Add_Special_Tile", "Remove_Special_Tile", "Improve_Special_Tile", "Steal_Special_Tile",
"Convert_Tile_Color", "Add_CD_Tile", "Add_2_Turn_CD_Tile", "Add_Trap_Tile",
"Add_Strike_Tile", "Add_Attack_Tile", "Add_Protect_Tile", "Add_Charged_Tile",
"Add_Critical_Tile", "Add_Locked_Tile", "Add_Invis_Tile", "Add_Web_Tile")
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
data
input$Offense
input$Offense<9
input$Offense<-9
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
data
input$Offense<-7
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
data
input$Offensive <- 9
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
data
input$Offensive <- 7
a <- data
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
a <- read.csv("Teams_Compendium.csv", row.names = 1) %>%
tbl_df()
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
data
dim(data)
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
select_chars_filter <- function(data){
select_chars <- c(input$select_1chars, input$select_2chars, input$select_3chars, input$select_4chars, input$select_5chars)
if(!is.null(select_chars) && !is.null(data) && dim(data)[1] != 0) {
select_chars.list <- list()
for(i in 1:length(select_chars)) {
select_chars.list[[i]] <- c(which(data$Char1 == select_chars[i]),
which(data$Char2 == select_chars[i]),
which(data$Char3 == select_chars[i]))
}
data[Reduce(intersect, select_chars.list), ]
} else {
data
}
}
data
data %>% select_chars_filter
data %>% select_chars_filter %>% top_filter
top_filter <- function(data) {
if(is.null(data)){ data } else {
# Health Filter
data <- filter(data, (MaxHP.Char3 >= input$MaxHP[1] & MaxHP.Char3 <= input$MaxHP[2]) & (MaxHP.Char1 >= input$MaxHP[1] & MaxHP.Char1 <= input$MaxHP[2]) & (MaxHP.Char2 >= input$MaxHP[1] & MaxHP.Char2 <= input$MaxHP[2]))
data <- filter(data, CombinedHP >= input$CombinedHP[1] & CombinedHP <= input$CombinedHP[2])
# Option Filter Function
filterOption <- function(data, option){
if (!is.null(input[[option]]) && input[[option]] != 0){ data <- data[data[[option]] >= as.integer(input[[option]]),] }
data
}
#### Options ####
options <- c("Actives", "Passives", "Cheap",
"Offensive", "Possible_Damage", "Direct_Damage", "Team_Damage",
"Defensive", "Stun", "Shake", "Healing",
"Manipulate_AP", "Steal_AP", "Gain_AP", "Destroy_AP",
"Add_Special_Tile", "Remove_Special_Tile", "Improve_Special_Tile", "Steal_Special_Tile",
"Convert_Tile_Color", "Add_CD_Tile", "Add_2_Turn_CD_Tile", "Add_Trap_Tile",
"Add_Strike_Tile", "Add_Attack_Tile", "Add_Protect_Tile", "Add_Charged_Tile",
"Add_Critical_Tile", "Add_Locked_Tile", "Add_Invis_Tile", "Add_Web_Tile")
for (i in 1:length(options)){
data <- filterOption(data, options[i])
}
if(!is.null(data)){ data <- arrange(data, desc(Actives), desc(Passives), desc(CombinedHP)) }
data
}
}
data %>% select_chars_filter %>% top_filter
data %>% select_chars_filter %>% top_filter
input$rarity
input$rarity <- 4
data <- a %>% rarity_filter
data %>% select_chars_filter %>% top_filter
input$Actives <- 1
data %>% select_chars_filter %>% top_filter
input
input$Rarity <- 1:5
data %>% select_chars_filter %>% top_filter
input
input$select_4Chars <- "Deadpool (Uncanny X-Force)"
select_chars <- c(input$select_1chars, input$select_2chars, input$select_3chars, input$select_4chars, input$select_5chars)
select_chars
input$select_4chars <- "Deadpool (Uncanny X-Force)"
select_chars <- c(input$select_1chars, input$select_2chars, input$select_3chars, input$select_4chars, input$select_5chars)
select_chars
if(!is.null(select_chars) && !is.null(data) && dim(data)[1] != 0) {
select_chars.list <- list()
for(i in 1:length(select_chars)) {
select_chars.list[[i]] <- c(which(data$Char1 == select_chars[i]),
which(data$Char2 == select_chars[i]),
which(data$Char3 == select_chars[i]))
}
data[Reduce(intersect, select_chars.list), ]
} else {
data
}
data
data <- a
if(!is.null(select_chars) && !is.null(data) && dim(data)[1] != 0) {
select_chars.list <- list()
for(i in 1:length(select_chars)) {
select_chars.list[[i]] <- c(which(data$Char1 == select_chars[i]),
which(data$Char2 == select_chars[i]),
which(data$Char3 == select_chars[i]))
}
data[Reduce(intersect, select_chars.list), ]
} else {
data
}
input$select_4chars <- c("Deadpool (Uncanny X-Force)", "Mr. Fantastic (Reed Richards)")
if(!is.null(select_chars) && !is.null(data) && dim(data)[1] != 0) {
select_chars.list <- list()
for(i in 1:length(select_chars)) {
select_chars.list[[i]] <- c(which(data$Char1 == select_chars[i]),
which(data$Char2 == select_chars[i]),
which(data$Char3 == select_chars[i]))
}
data[Reduce(intersect, select_chars.list), ]
} else {
data
}
select_chars.list <- list()
for(i in 1:length(select_chars)) {
select_chars.list[[i]] <- c(which(data$Char1 == select_chars[i]),
which(data$Char2 == select_chars[i]),
which(data$Char3 == select_chars[i]))
}
data[Reduce(intersect, select_chars.list), ]
input$select_4chars <- c("Deadpool (Uncanny X-Force)", "Mr. Fantastic (Reed Richards)", "Sam Wilson (Captain America)")
select_chars.list <- list()
for(i in 1:length(select_chars)) {
select_chars.list[[i]] <- c(which(data$Char1 == select_chars[i]),
which(data$Char2 == select_chars[i]),
which(data$Char3 == select_chars[i]))
}
data[Reduce(intersect, select_chars.list), ]
select_chars.list
data[Reduce(intersect, select_chars.list), ]
which(data$Char1 == select_chars[i])
which(data$Char2 == select_chars[i])
data[Reduce(intersect, select_chars.list), ]
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
data[0,0]
data
data[0,]
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
data <- MULL
data <- NULL
data[0, ]
shiny::runApp('Desktop/MPQ/MPQ_Character_Selection_V2')
#shinyapps::deployApp('/Users/alexplocik/Desktop/MPQ/MPQ_Character_Selection_V3/')
#shinyapps::deployApp('/Users/alexplocik/Desktop/MPQ/MPQ_Team_Builder/')
library(shiny)
library(shinyjs)
library(dplyr)
library(ggplot2)
library(reshape2)
# load data
a <- read.csv("Teams_Compendium.csv", row.names = 1) %>%
tbl_df()
# b <- read.csv("Teams.csv", row.names = 1) %>%
#   tbl_df()
c <- read.csv("Compendium.csv", row.names = 1) %>%
tbl_df() %>%
arrange(desc(Rarity), CharacterName)
# Factor levels for ui and server
allRarity <- levels(factor(c(a$Rarity.Char1, a$Rarity.Char2, a$Rarity.Char3)))
allChars <- c %>% select(CharacterName) %>% unique() %>% as.matrix()
all5Chars <- c %>% filter(Rarity == 5) %>% select(CharacterName) %>% unique() %>% as.matrix()
names(all5Chars) <- c %>% filter(Rarity == 5) %>% select(CharacterName1) %>% unique() %>% as.matrix()
all4Chars <- c %>% filter(Rarity == 4) %>% select(CharacterName) %>% unique() %>% as.matrix()
names(all4Chars) <- c %>% filter(Rarity == 4) %>% select(CharacterName1) %>% unique() %>% as.matrix()
all3Chars <- c %>% filter(Rarity == 3) %>% select(CharacterName) %>% unique() %>% as.matrix()
names(all3Chars) <- c %>% filter(Rarity == 3) %>% select(CharacterName1) %>% unique() %>% as.matrix()
all2Chars <- c %>% filter(Rarity == 2) %>% select(CharacterName) %>% unique() %>% as.matrix()
names(all2Chars) <- c %>% filter(Rarity == 2) %>% select(CharacterName1) %>% unique() %>% as.matrix()
all1Chars <- c %>% filter(Rarity == 1) %>% select(CharacterName) %>% unique() %>% as.matrix()
names(all1Chars) <- c %>% filter(Rarity == 1) %>% select(CharacterName1) %>% unique() %>% as.matrix()
library(shiny)
library(shinyjs)
library(dplyr)
library(ggplot2)
library(reshape2)
# load data
a <- read.csv("Teams_Compendium.csv", row.names = 1) %>%
tbl_df()
getwd()
a <- read.csv("Teams_Compendium.csv", row.names = 1) %>%
tbl_df()
# b <- read.csv("Teams.csv", row.names = 1) %>%
getwd()
setwd <- ("/Users/alexplocik/Desktop/MPQ/MPQ_Character_Selection_V3/")
a <- read.csv("Teams_Compendium.csv", row.names = 1) %>%
tbl_df()
getwd()
setwd <- "/Users/alexplocik/Desktop/MPQ/MPQ_Character_Selection_V3/"
getwd()
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
source('~/Desktop/MPQ/MPQ color ability stats.R', echo=TRUE)
View(sig.table)
shinyapps::deployApp('/Users/alexplocik/Desktop/MPQ/MPQ_Team_Builder/')
library(xlsx)
a <- tbl_df(read.xlsx(file = "/Users/alexplocik/Desktop/MPQ/Damage curves.xls", sheetIndex = 1, header = T))
a <- tbl_df(read.xlsx(file = "/Users/alexplocik/Desktop/MPQ/Damage curves.xls", sheetIndex = 1, header = T))
head(a)
a
View(all1Chars)
View(a)
mutate_each(a,funs(if(. == "NA"){""})))
mutate_each(a,funs(if(. == "NA"){""}))
mutate_each(a,funs(is.na(.){""}))
is.na(a)
is.na(a) <- ""
a[is.na(a)]
a
# ddply function to collapse all color usage by unique character name
a$Abilities <- paste(a$Color, a$Use, sep = "_")
# Function to replace "yes" with Color_Use (e.g. blue_passive) string
column.Color_Use <- function(column = "Stun"){
column <- a[, column]
mat <- data.frame(a$Color, a$Use, column)
apply(mat, 1, function(x){
if(x[3] == "yes"){ paste(x[1], x[2], sep = "_") }
else if(x[3] == "no") {""}
else {x[3]}
})
}
##### Replace "yes" with Color_Use (e.g. blue_passive) string ####
b <- sapply(names(select(a, CharacterName, Direct_Damage:Abilities)), column.Color_Use) %>%
data.frame() %>%
tbl_df()
write.csv(a, "tmp.csv")
a <- read.csv(a, row.names = 1)
a <- read.csv("tmp.csv", row.names = 1)
a
a <- tbl_df(read.csv("tmp.csv", row.names = 1))
a
?read.csv
write.csv(a, "tmp.csv", na="")
a <- tbl_df(read.csv("tmp.csv", row.names = 1))
a
View(a)
a <- tbl_df(read.xlsx(file = "/Users/alexplocik/Desktop/MPQ/Damage curves.xls", sheetIndex = 1, header = T))
write.csv(a, "tmp.csv", na="")
a <- tbl_df(read.csv("tmp.csv", row.names = 1))
a
View(a)
# ddply function to collapse all color usage by unique character name
a$Abilities <- paste(a$Color, a$Use, sep = "_")
# Function to replace "yes" with Color_Use (e.g. blue_passive) string
column.Color_Use <- function(column = "Stun"){
column <- a[, column]
mat <- data.frame(a$Color, a$Use, column)
apply(mat, 1, function(x){
if(x[3] == "yes"){ paste(x[1], x[2], sep = "_") }
else if(x[3] == "no") {""}
else {x[3]}
})
}
##### Replace "yes" with Color_Use (e.g. blue_passive) string ####
b <- sapply(names(select(a, CharacterName, Direct_Damage:Abilities)), column.Color_Use) %>%
data.frame() %>%
tbl_df()
# Combine all aspects of a Character into one comma seperated string
# Old ddplyr way
# test <- ddply(b, 'CharacterName', summarize,
#               #Colors = paste(levels(factor(Color_Use)), collapse = ","),
#               Direct_Damage = paste(levels(factor(Direct_Damage)), collapse = ","),
#               Stun = paste(levels(factor(Stun)), collapse = ","),
#               Shake = paste(levels(factor(Shake)), collapse = ",")
#               )
#Same as above
# test2 <- b %>%
#   group_by(CharacterName) %>%
#   do(Direct_Damage = paste(levels(factor(.$Direct_Damage)), collapse = ","),
#      Stun = paste(levels(factor(.$Stun)), collapse = ",")) %>%
#   data.frame()
##### Combine all aspects of a Character into one comma seperated string ####
# Much better!
c <- b %>%
group_by(CharacterName) %>%
mutate_each(funs(paste(levels(factor(.)), collapse = ","))) %>%
data.frame() %>% tbl_df() %>% unique()
# Same as above but for playable character combinations
c1 <- a %>%
select(CharacterName, CharacterName3, Smiley) %>% group_by(CharacterName) %>%
mutate_each(funs(paste(levels(factor(.)), collapse = ","))) %>%
data.frame() %>% tbl_df() %>% unique()
#### Create all character and color combinations for 3 person teams ####
combinat.trio <- function(x){
combn(x, 3, fun=NULL, simplify=TRUE) %>%
matrix(ncol = 3, byrow = T) %>%
as.data.frame() %>%
tbl_df()
}
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
?arrange
data
a
arrange(a, c("CharacterName", "CharacterName1"))
arrange(a, c("CharacterName", "CharacterName1"))
select.options
options <- data %>% select(Direct_Damage:Manipulate_AP) %>% names
options <- a %>% select(Direct_Damage:Manipulate_AP) %>% names
select.options <- sapply(options, function(x){if(!is.null(input[[x]]) && input[[x]] != 0) { x }}) %>% unlist
input <- NULL
input$Direct_Damage <- 2
input$Passives <- 6
input$Actoves <- NULL
input$Actives <- NULL
select.options <- sapply(options, function(x){if(!is.null(input[[x]]) && input[[x]] != 0) { x }}) %>% unlist
select.options
dots <- lapply(select.options, as.symbol)
dots
arrange(a, .dots=dots)
arrange(a, Direct_Damage)
arrange(a, .dots=dots)
dots <- sapply(select.options, as.symbol)
arrange(a, .dots=dots)
as.symbol(select.options)
arrange(a, .dots=as.symbol(select.options))
arrange(a, as.symbol(select.options))
arrange_(a, .dots=as.symbol(select.options))
arrange_(a, .dots=dots)
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
names(a)
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
?arrange_
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
shiny::runApp('Desktop/MPQ/MPQ_Team_Builder')
